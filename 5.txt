备份！！！！！！！！！！
请备份上一期的项目，很急
没有备份的人真的有难了！

出现这种情况应该是寄了，可以重开了，找了半天问题都没解决，但是，别急。

设计注册界面

接口：Task<bool> RegisterAsync(string account, string password);

类：
public async Task<bool> RegisterAsync(string account, string password)
{
    var user = new User();
    user.Account = account;
    user.Password = password;
	var userExists = await _db.Queryable<User>().AnyAsync(u => u.Account == account);//判重
	if (userExists)
	{

    		return false;
	}

    var ret = await _db.Insertable(user).ExecuteCommandAsync();
    if (ret == 1)
    {
        return true;
    }else
    {
        return false;
    }
}
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

private void btnRegister_Click(object sender, EventArgs e)
{
    
    var frm = Native.CreateInstance<frmUserRegister>();
    Hide();
    frm.Show();
}

private void btnQuit_Click(object sender, EventArgs e)
{
    System.Environment.Exit(0);
}
重新建表
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

private readonly IUserService _userService;
public frmUserRegister(IUserService userService)
{
    InitializeComponent();
    _userService = userService;
}

private async void btnOK_ClickAsync(object sender, EventArgs e)
{
    var account = tbRaccount.Text.Trim();
    var password = tbRpassword.Text.Trim();
    if (account == "" || password == "")
    {
        MessageBox.Show("密码和账号不能为空！");
        return;
    }
    else
    {
        var ret = await _userService.RegisterAsync(account, password);
        if (ret == true)
        {
            MessageBox.Show("注册成功！");
            var frm = Native.CreateInstance<frmLogin>();
            frm.Show();
            Close();
        }
        else
        {
            MessageBox.Show("改账号已存在！");
            return;
        }

    }
}

private void btnReturn_Click(object sender, EventArgs e)
{
    var frm = Native.CreateInstance<frmLogin>();
    frm.Show();
    Close();
}



。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。


创建时间只读，创建人为登录名

修改book表结构，使得部分字段可空
同时删除原表，新建表
设置这些字段为空，其他非空字段需要反馈“不能为空”的信息


[SugarTable("books")]
public class Book
{
    [SugarColumn(ColumnName = "id", IsPrimaryKey = true, IsIdentity = true)]
    public int Id { get; set; }

    [SugarColumn(ColumnName = "book_name", Length = 255, ColumnDescription = "图书名称")]
    public string BookName { get; set; }

    [SugarColumn(ColumnName = "book_number", Length = 20, ColumnDescription = "图书号")]
    public string BookNumber { get; set; }

    [SugarColumn(ColumnName = "unit_price", Length = 8, DecimalDigits = 2, ColumnDescription = "单价", IsNullable = true)]
    public decimal? UnitPrice { get; set; }

    [SugarColumn(ColumnName = "author", Length = 100, ColumnDescription = "作者")]
    public string Author { get; set; }

    [SugarColumn(ColumnName = "press", Length = 100, ColumnDescription = "出版社", IsNullable = true)]
    public string Press { get; set; }

    [SugarColumn(ColumnName = "publication_date", ColumnDescription = "出版日期", IsNullable = true)]
    public DateTime PublicationDate { get; set; }

    [SugarColumn(ColumnName = "press_phone", Length = 50, ColumnDescription = "出版社电话", IsNullable = true)]
    public string PressPhone { get; set; }

    [SugarColumn(ColumnName = "press_website", Length = 100, ColumnDescription = "出版社网站", IsNullable = true)]
    public string PressWebsite { get; set; }

    [SugarColumn(ColumnName = "created_time", ColumnDescription = "创建时间")]
    public DateTime CreatedTime { get; set; }

    [SugarColumn(ColumnName = "creater", Length = 20, ColumnDescription = "创建人")]
    public string Creater { get; set; }
}



。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
var bookExists = await _db.Queryable<Book>().AnyAsync(u => u.BookNumber == bookNumber);//判重
if (bookExists)
{

    return false;
}

var userExists = await _db.Queryable<User>().AnyAsync(u => u.Account == account);//判重
if (userExists)
{

    return false;
}


我们设置了单价可为空，先测试一下空值
报错:“The input string '' was not in a correct format.”
需要修改类型，将decimal改成deciaml?

。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。

同时设置图书编号不能重复

if (string.IsNullOrEmpty(bookName))
{
    MessageBox.Show("书本名不能为空！");
    return;
}

if (string.IsNullOrEmpty(bookNumber))
{
    MessageBox.Show("书本编号不能为空！");
    return;
}              

if (string.IsNullOrEmpty(bookAuthor))
{
    MessageBox.Show("作者名不能为空！");
    return;
}

if (string.IsNullOrEmpty(bookCreater))
{
    MessageBox.Show("创建人不能为空！");
    return;
}

。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。


public class FormClass
{
    public string bookNumber { get; set;}
    public string bookName { get; set;}
    public string author { get; set; }
    public decimal? unitPrice { get; set;}
    public string press { get; set;}
    public DateTime publicationDate { get; set;}
    public string pressPhone { get; set;}
    public string pressWeb { get; set;}
    public DateTime CreatedTime { get; set;}
    public string creater { get; set;}
}

将后缀去除



。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
private readonly IBookService _bookService;

private readonly ILogger<BookController> _logger;

public BookController(IBookService bookService, ILogger<BookController> logger)
{
    _bookService = bookService;
    _logger = logger;
}

[HttpPost]
[Route("get_book")]
//[LoggingMonitor]
public async Task<Book> GetBook([FromForm] int id)
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了GetBook接口");
    return await _bookService.GetBooksAsync(id);
    
}

[HttpPost]
[Route("get_books")]
public async Task<List<Book>> GetBookAsync()
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了GetBookAsync接口");
    return await _bookService.GetBookAsync();
}

[HttpPost]
[Route("get_nna")]
public async Task<List<Book>> GetBooksAsync([FromForm] FormClass FC)
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了GetBooksAsync接口");
    return await _bookService.GetBooksAsync(FC.bookNumber, FC.bookName, FC.author);
}

[HttpPost]
[Route("add_book")]
public async Task<bool> AddBookAsync([FromForm] FormClass FC)
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了AddBookAsync接口");
    return await _bookService.AddBookAsync(FC.bookName, FC.bookNumber, FC.unitPrice
        , FC.author, FC.press, FC.publicationDate
        , FC.pressPhone, FC.pressWeb, FC.CreatedTime, FC.creater);
}

[HttpPost]
[Route("update_book")]
public async Task<bool> UpdateBookAsync([FromForm] int id, [FromForm] FormClass FC)
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了UpdateBookAsync接口");
    return await _bookService.UpdateBookAsync(id, FC.bookName, FC.bookNumber
        , FC.unitPrice, FC.author, FC.press, FC.publicationDate
        , FC.pressPhone, FC.pressWeb, FC.CreatedTime, FC.creater);
}

[HttpPost]
[Route("delete_book")]
public async Task<bool> DeleteBookAsync([FromForm] int id)
{
    _logger.LogInformation($"{App.HttpContext.GetRemoteIpAddressToIPv4()}----有人访问了DeleteBookAsync接口");
    return await _bookService.DeleteBookAsync(id);
}
。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
decimal类型问题


decimal? bookPrime;
decimal s;
if (string.IsNullOrEmpty(tbBookPrice.Text))
{
     bookPrime = null;
}
else
{
    //s = decimal.Parse(tbBookPrice.Text);
    if (decimal.TryParse(tbBookPrice.Text, out s))
    {
        // 转换成功
        bookPrime = s;
    }
    else
    {
        //转换失败
        MessageBox.Show("单价行请输入有效数字！");
        return;

    }

}

好像结束了。
